#include <string.h>
#include <stdbool.h>
#include <getopt.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>

//Initializing BST
typedef struct Node
{
    //value of the pointer
    char* key;
    //Occurances
    int value;
    //left subtree
    struct Node* left;
    //right subtree
    struct Node* right;
}Node;

//Module removes the empty line if it is present
void removeEnterLine(char* line)
{
   //initializing pointer and itarate
   char* pointer=&(line[0]);
   while(pointer!=NULL)
   {
       if((*pointer)=='\n')
       {
           *pointer='\0';
           break;
       }
       pointer++;
   }
}

//Module to compare two strings, case sensetive
int caseSens(char string1,char string2)
{
    //pointers to the strings
    char* ptr1=&string1;
    char* ptr2=&string2;
    //while pointers are not zero, empty
    while(ptr1!='\0' && ptr2!='\0')
    {
        //comparing, if str1>str2
        if((*ptr1)>(*ptr2))
            return 1;
        //comparing, if str1<str2
        else if((*ptr1)<(*ptr2))
            return -1;
        //moving forward
        ptr1++;
        ptr2++;
   }
   //if reached the end of the strings
   if(ptr1=='\0' && ptr2=='\0')
       return 0;
   //if the first string shorter, it is smaller
   else if(ptr1=='\0')
       return -1;
   //if the second string shorter, it is smaller
   else
       return 1;
}

//Module to compare two strings case insesitive
int caseInsens(char str1,char str2)
{
    //variable to store the number of occurances
    //int count = 0;
    //pointers to strings
    char* pointer1=&str1;
    char* pointer2=&str2;
    //while both strings have characters
    while(pointer1!='\0' && pointer2!='\0')
    {
        //first cahracters
        char char1=*pointer1;
        char char2=*pointer2;
        //changing to lower case
        char1=tolower(char1);
        char2=tolower(char2);
        //comparing two characters
        if(char1>char2)
            return 1;
        else if(char1<char2)
            return -1;
        //moving to the next characters
        pointer1++;
        pointer2++;
    }
    //if two strings are equal
    if(pointer1=='\0' && pointer2=='\0')
    {
       //count++;
       return 0;
    }
    //first string is shorter than second
    else if(pointer1=='\0')
        return -1;
    //secont string is shorter
    else
        return 1;
}
//Module that compare the strings
int compareStrings(char String1,char String2,bool caseSensitive)
{
   if(caseSensitive==true)
   {
       return caseSens(String1,String2);
   }
   else
   {
       return caseInsens(String1,String2);
   }
}
//check here
void insert(char tmp,Node root,bool caseSensitive)
{
   Node* temp=&root;
   Node* parent=NULL;
   while(temp!=NULL)
   {
       if(compareStrings(*temp->key,tmp,caseSensitive)==0)
       {
           temp->value=temp->value+1;
           return;
       }
       else if(compareStrings(*temp->key,tmp,caseSensitive)>0)
       {
           parent=temp;
           temp=temp->left;
       }
       else
       {
           parent=temp;
           temp=temp->right;
       }
   }

   Node* newest=(Node*)malloc(sizeof(Node)*1);
   newest->left=NULL;
   newest->right=NULL;
   newest->key=&tmp;
   newest->value=1;
   if(compareStrings(*parent->key,tmp,caseSensitive)>0)
   {
   //printf("left\n");
       parent->left=newest;
   }
   else
   {
       //printf("right\n");
       parent->right=newest;
   }
}
//FIXME
void inorder(Node* root)
{
   if(root==NULL)
       return;
   inorder(root->left);
   //int i;
   //for(i=1;i<=root->value;i++)
   printf("%s\n", root->key);
   inorder(root->right);
}

int main(int argc,char** argv){
   bool caseSensitive=false;
   char* output="";
   char* input="";
   int c;
   //FIXME - add all options, flags to open file if name provided
   while((c=getopt(argc,argv,"co:"))!=-1)
   {
       switch(c)
       {
           case 'c':
               caseSensitive=true;
               break;
           case 'o':
               output=optarg;
               break;
       }
   }

   int size=100;
   char** arr=(char**)(malloc(sizeof(char*)*size));
   int index;
   for (index = optind; index < argc; index++)
   {
      input=argv[index];
   }
   int ind=0;
   if(strcmp(input,"")==0)
   { //std input
      size_t line_size;
      printf("Enter strings line by line\n");
      char* line=(char*)malloc(sizeof(char)*100);
      while(getline(&line,&line_size,stdin)!=-1)
      {
          if(strcmp(line,"\n")==0)
          {
              break;
          }
          removeEnterLine(line);
          arr[ind++]=line;
          line=(char*)malloc(sizeof(char)*100);
      }
   }
   else
   {
      //FILE *file = fopen(input, "r");
       FILE *file = fopen("textFile.txt", "r");
       if (file == NULL)
       {
         printf("Error! Could not open file\n");
         exit(-1); // must include stdlib.h
       }
      char* line=(char*)malloc(sizeof(char)*100);
      size_t line_size;
      while(getline(&line,&line_size,file)!=-1)
      {
          removeEnterLine(line);
          arr[ind++]=line;
          line=(char*)malloc(sizeof(char)*100);
      }
   }
   int j;
    //for(j=0;j<ind;j++)
    //printf("%d: %s\n", j+1, arr[j]);
   int sizeTree=0;
   Node* root = NULL;
   for(j=0;j<ind;j++)
   {
      //first element
      char* tmp=arr[j];
      //if tree is empty
      if(sizeTree==0)
      {
          //first node
          Node* newest=(Node*)malloc(sizeof(Node)*1);
          //values is temp value, thus the first string
          newest->key=tmp;
          //occurances
          newest->value=1;
          newest->left=NULL;
          newest->right=NULL;
          //the root of the tree
          root=newest;
      }
      else
      {
          insert(*tmp,*root,caseSensitive);
      }
      //increment the tree size
      sizeTree++;
   }
   //FIXME - printing only root
   inorder(root);
   return 0;
}
